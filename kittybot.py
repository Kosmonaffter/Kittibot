import logging
import os
import requests
import time
import ollama

from collections import deque
from datetime import datetime
from dotenv import load_dotenv
from telebot import TeleBot, types


load_dotenv()
token = os.getenv('TOKEN')

bot = TeleBot(token=token)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
)

URL = 'https://api.thecatapi.com/v1/images/search'
URL_DOG = 'https://api.thedogapi.com/v1/images/search'

user_photo_times = {}
MAX_PHOTOS = 5
TIME_WINDOW = 60  # —Å–µ–∫—É–Ω–¥


def ask_gpt(message_text):
    response = ollama.chat(
        model='llama3',  # –∏–ª–∏ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–∫–∞—á–∞–ª–∏
        messages=[{'role': 'user', 'content': message_text}]
    )
    return response['message']['content']


def can_send_photo(user_id):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ"""
    now = time.time()
    if user_id not in user_photo_times:
        user_photo_times[user_id] = deque()

    times = user_photo_times[user_id]

    while times and now - times[0] > TIME_WINDOW:
        times.popleft()

    if len(times) < MAX_PHOTOS:
        times.append(now)
        return True
    else:
        return False


def get_current_time():
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')


def get_new_image():
    try:
        response = requests.get(URL)
        response.raise_for_status()
        data = response.json()
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API –∫–æ—Ç–æ–≤: {error}')
        try:
            response = requests.get(URL_DOG)
            response.raise_for_status()
            data = response.json()
        except Exception as error2:
            logging.error(
                f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É API —Å–æ–±–∞–∫: {error2}'
            )
            return None
    if data and isinstance(data, list) and len(data) > 0:
        return data[0].get('url')
    return None


def get_new_image_dog():
    try:
        response = requests.get(URL_DOG)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP-—Å—Ç–∞—Ç—É—Å–∞
        data = response.json()
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API —Å–æ–±–∞–∫: {error}')
        try:
            response = requests.get(URL)
            response.raise_for_status()
            data = response.json()
        except Exception as error2:
            logging.error(
                f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É API –∫–æ—Ç–æ–≤: {error2}'
            )
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–ø–∞–ª–∏
    if data and isinstance(data, list) and len(data) > 0:
        return data[0].get('url')
    return None


def get_info():
    welcome_text = (
        "–Ø - KittyBot, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –¥—Ä—É–≥! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üê± –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∏–ª—ã–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–æ–≤ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–æ—Ç–∏–∫¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /newcat\n"
        "üê∂ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–±–∞–≤–Ω—ã–µ —Ñ–æ—Ç–æ —Å–æ–±–∞—á–µ–∫ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°–æ–±–∞—á–∫–∞¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /newdog\n"
        "‚è∞ –£–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å¬ª\n"
        "üÜî –£–∑–Ω–∞–≤–∞—Ç—å —Ç–≤–æ–π Telegram ID - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–∞–∫–æ–π —É –º–µ–Ω—è ID¬ª\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT - —É–º–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞!\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–æ–≤ –∏ —Å–æ–±–∞—á–µ–∫ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏–º–∏—Ç - –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ –≤ –º–∏–Ω—É—Ç—É.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä"
    )
    return welcome_text


@bot.message_handler(commands=['newcat'])
def new_cat(message):
    chat = message.chat
    bot.send_photo(chat.id, get_new_image())


@bot.message_handler(commands=['newdog'])
def new_dog(message):
    chat = message.chat
    bot.send_photo(chat.id, get_new_image_dog())


@bot.message_handler(commands=['info'])
def info(message):
    chat = message.chat
    bot.send_message(chat.id, get_info())


@bot.message_handler(commands=['start'])
def wake_up(message):
    chat = message.chat
    name = message.chat.first_name or "–¥—Ä—É–≥"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_newcat = types.KeyboardButton('–ö–æ—Ç–∏–∫')
    button_newdog = types.KeyboardButton('–°–æ–±–∞—á–∫–∞')
    keyboard.add(button_newcat, button_newdog)
    keyboard.row(
        types.KeyboardButton('–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å'),
        types.KeyboardButton('–ö–∞–∫–æ–π —É –º–µ–Ω—è ID'),
    )
    keyboard.row(
        types.KeyboardButton('info'),
        types.KeyboardButton('/....'),
    )
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n"
        "–Ø - KittyBot, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –¥—Ä—É–≥! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üê± –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∏–ª—ã–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–æ–≤ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–æ—Ç–∏–∫¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /newcat\n"
        "üê∂ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–±–∞–≤–Ω—ã–µ —Ñ–æ—Ç–æ —Å–æ–±–∞—á–µ–∫ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°–æ–±–∞—á–∫–∞¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /newdog\n"
        "‚è∞ –£–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å¬ª\n"
        "üÜî –£–∑–Ω–∞–≤–∞—Ç—å —Ç–≤–æ–π Telegram ID - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–∞–∫–æ–π —É –º–µ–Ω—è ID¬ª\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT - —É–º–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞!\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–æ–≤ –∏ —Å–æ–±–∞—á–µ–∫ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏–º–∏—Ç - –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ –≤ –º–∏–Ω—É—Ç—É.\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä"
    )
    bot.send_message(
        chat_id=chat.id,
        text=welcome_text,
        reply_markup=keyboard
    )

    bot.send_photo(chat.id, get_new_image())


@bot.message_handler(content_types=['text'])
def say_hi(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.strip().lower()
    user_text = message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥
    if text in ['–∫–æ—Ç–∏–∫', '—Å–æ–±–∞—á–∫–∞']:
        if not can_send_photo(user_id):
            bot.send_message(
                chat_id,
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç 5 —Ñ–æ—Ç–æ –≤ –º–∏–Ω—É—Ç—É –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
            return
        if text == '–∫–æ—Ç–∏–∫':
            photo_url = get_new_image()
            if photo_url:
                bot.send_photo(chat_id, photo_url)
            else:
                bot.send_message(chat_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞.')
            return
        if text == '—Å–æ–±–∞—á–∫–∞':
            photo_url = get_new_image_dog()
            if photo_url:
                bot.send_photo(chat_id, photo_url)
            else:
                bot.send_message(chat_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —Å–æ–±–∞—á–∫–∏.')
            return

    if text == '–∫–∞–∫–æ–π —É –º–µ–Ω—è id':
        bot.send_message(chat_id, f'–í–∞—à Telegram ID: {user_id}')
        return

    if text == '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å':
        bot.send_message(chat_id, f'–°–µ–π—á–∞—Å: {get_current_time()}')
        return

    if text == 'info':
        bot.send_message(chat_id, get_info())
        return

    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT
    bot.send_message(chat_id, "–û–π –Ω—É–∂–Ω–æ –ø–æ –¥—É–º–∞—Ç—å...")
    try:
        reply = ask_gpt(user_text)
        bot.send_message(chat_id, reply)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}")


def main():
    bot.polling()


if __name__ == '__main__':
    main()
