import os
import time
from collections import deque
from datetime import datetime
from dotenv import load_dotenv
from telebot import TeleBot, types

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from logger import setup_logging, log_command, log_error
from gpt_client import gpt_client
from image_api import image_api

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv('TOKEN')
if not TOKEN:
    raise ValueError('TOKEN environment variable is not set')

MAX_PHOTOS = 5
TIME_WINDOW = 60  # —Å–µ–∫—É–Ω–¥

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(token=TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_photo_times = {}


def get_current_time() -> str:
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'''
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')


def can_send_photo(user_id: int) -> bool:
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ'''
    now = time.time()

    if user_id not in user_photo_times:
        user_photo_times[user_id] = deque()

    times = user_photo_times[user_id]

    # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
    while times and now - times[0] > TIME_WINDOW:
        times.popleft()

    if len(times) < MAX_PHOTOS:
        times.append(now)
        return True
    return False


def get_welcome_message(name: str = '–¥—Ä—É–≥') -> str:
    '''–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'''
    return (
        f'–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n\n'
        '–Ø - KittyBot, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –¥—Ä—É–≥! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n'
        'üê± –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∏–ª—ã–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–æ–≤ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–æ—Ç–∏–∫¬ª '
        '–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /newcat\n'
        'üê∂ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–±–∞–≤–Ω—ã–µ —Ñ–æ—Ç–æ —Å–æ–±–∞—á–µ–∫ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '
        '¬´–°–æ–±–∞—á–∫–∞¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /newdog\n'
        '‚è∞ –£–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å¬ª\n'
        'üÜî –£–∑–Ω–∞–≤–∞—Ç—å —Ç–≤–æ–π Telegram ID - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ö–∞–∫–æ–π —É –º–µ–Ω—è ID¬ª\n\n'
        'üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é '
        'GPT - —É–º–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞!\n\n'
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–æ–≤ –∏ —Å–æ–±–∞—á–µ–∫ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏–º–∏—Ç - '
        '–Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ –≤ –º–∏–Ω—É—Ç—É.\n\n'
        '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä'
    )


def get_info_message() -> str:
    '''–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'''
    return get_welcome_message('–¥—Ä—É–≥').split('üëã\n\n')[1]


def create_main_keyboard() -> types.ReplyKeyboardMarkup:
    '''–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'''
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∂–∏–≤–æ—Ç–Ω—ã–µ
    button_newcat = types.KeyboardButton('–ö–æ—Ç–∏–∫')
    button_newdog = types.KeyboardButton('–°–æ–±–∞—á–∫–∞')
    keyboard.add(button_newcat, button_newdog)

    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—Ä–µ–º—è –∏ ID
    keyboard.row(
        types.KeyboardButton('–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å'),
        types.KeyboardButton('–ö–∞–∫–æ–π —É –º–µ–Ω—è ID'),
    )

    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    keyboard.row(types.KeyboardButton('info'))

    return keyboard


def handle_photo_request(chat_id: int, user_id: int, animal_type: str):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–æ—Ç–æ'''
    if not can_send_photo(user_id):
        message = (
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç 5 —Ñ–æ—Ç–æ –≤ –º–∏–Ω—É—Ç—É –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. '
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        bot.send_message(chat_id, message)
        log_command(
            logger, user_id, f'photo_{animal_type}', False, 'rate_limit'
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    photo_url = (
        image_api.get_cat_image()
        if animal_type == 'cat'
        else image_api.get_dog_image()
    )
    animal_name = '–∫–æ—Ç–∏–∫–∞' if animal_type == 'cat' else '—Å–æ–±–∞—á–∫–∏'

    if photo_url:
        bot.send_photo(chat_id, photo_url)
        log_command(logger, user_id, f'photo_{animal_type}')
    else:
        error_message = f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ {animal_name}.'
        bot.send_message(chat_id, error_message)
        log_command(
            logger, user_id, f'photo_{animal_type}', False, 'api_error'
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['newcat'])
def new_cat(message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newcat'''
    chat_id = message.chat.id
    user_id = message.from_user.id
    handle_photo_request(chat_id, user_id, 'cat')


@bot.message_handler(commands=['newdog'])
def new_dog(message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newdog'''
    chat_id = message.chat.id
    user_id = message.from_user.id
    handle_photo_request(chat_id, user_id, 'dog')


@bot.message_handler(commands=['info'])
def info(message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info'''
    chat_id = message.chat.id
    user_id = message.from_user.id
    bot.send_message(chat_id, get_info_message())
    log_command(logger, user_id, 'info')


@bot.message_handler(commands=['start'])
def wake_up(message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start'''
    chat_id = message.chat.id
    user_id = message.from_user.id
    name = message.chat.first_name or '–¥—Ä—É–≥'

    keyboard = create_main_keyboard()
    welcome_text = get_welcome_message(name)

    bot.send_message(
        chat_id=chat_id,
        text=welcome_text,
        reply_markup=keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞
    photo_url = image_api.get_cat_image()
    if photo_url:
        bot.send_photo(chat_id, photo_url)

    log_command(logger, user_id, 'start')


@bot.message_handler(content_types=['text'])
def handle_text(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'''
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text.strip().lower()
    user_text = message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text in ['–∫–æ—Ç–∏–∫', '—Å–æ–±–∞—á–∫–∞']:
        animal_type = 'cat' if text == '–∫–æ—Ç–∏–∫' else 'dog'
        handle_photo_request(chat_id, user_id, animal_type)
        return

    elif text == '–∫–∞–∫–æ–π —É –º–µ–Ω—è id':
        bot.send_message(chat_id, f'–í–∞—à Telegram ID: {user_id}')
        log_command(logger, user_id, 'get_id')
        return

    elif text == '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å':
        current_time = get_current_time()
        bot.send_message(chat_id, f'–°–µ–π—á–∞—Å: {current_time}')
        log_command(logger, user_id, 'get_time')
        return

    elif text == 'info':
        bot.send_message(chat_id, get_info_message())
        log_command(logger, user_id, 'info_button')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT
    bot.send_message(chat_id, '...')
    try:
        reply = gpt_client.ask_with_fallback(user_text)
        bot.send_message(chat_id, reply)
        log_command(logger, user_id, 'gpt_request')
    except Exception as e:
        error_message = (
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. '
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
        bot.send_message(chat_id, error_message)
        log_command(logger, user_id, 'gpt_request', False, str(e))


def main():
    '''–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞'''
    logger.info('–ó–∞–ø—É—Å–∫ KittyBot...')
    try:
        bot.polling()
    except Exception as e:
        log_error(logger, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞', e)
    finally:
        logger.info('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ KittyBot')


if __name__ == '__main__':
    main()
